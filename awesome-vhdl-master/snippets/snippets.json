{
	"process --asynchronous": {
		"prefix": "process --asynchronous",
		"body": "${1:identifier} : process(clk, rst$2)\n\nbegin\n\tif(rst = '1') then\n\t\t$3\n  elsif((clk'event) and (clk='1')) then\n\t\t$0\n  end if ;\nend process ; -- $1\n",
		"description": "asynchronous process",
		"scope": "source.vhdl"
	},
	"architecture": {
		"prefix": "architecture",
		"body": "architecture ${1:arch} of ${2:ent} is \n$3\nbegin\n\t$0\nend $1 ; -- $1",
		"description": "architecture",
		"scope": "source.vhdl"
	},
	"case": {
		"prefix": "case",
		"body": "case( ${1:signal_name} ) is\n\n\twhen ${2:IDLE} =>\n\t\t$0\n\n\twhen others =>\n\nend case ;",
		"description": "case",
		"scope": "source.vhdl"
	},
	"else": {
		"prefix": "else",
		"body": "else\n\t$0",
		"description": "else",
		"scope": "source.vhdl"
	},
	"elsif": {
		"prefix": "elsif",
		"body": "elsif ${1:expression} then\n\t$0",
		"description": "elsif",
		"scope": "source.vhdl"
	},
	"entity": {
		"prefix": "entity",
		"body": "entity ${1:ent} is\n  port (\n\t\tclk : in std_logic;\n\t\trst : in std_logic$2);\nend;\n",
		"description": "entity",
		"scope": "source.vhdl"
	},
	"entity architecture": {
		"prefix": "entity architecture",
		"body": "entity ${1:ent} is\n  port (\n\t\tclk : in std_logic;\n\t\trst : in std_logic$2);\nend;\n\narchitecture ${3:arch} of ${1:ent} is\n$4\nbegin\n\t$5\nend architecture ; -- $3",
		"description": "entity architecture",
		"scope": "source.vhdl"
	},
	"for": {
		"prefix": "for",
		"body": "for ${2:i} in ${3:0} to ${4:10} loop\n\t$0\nend loop;",
		"description": "for loop",
		"scope": "source.vhdl"
	},
	"forg": {
		"prefix": "forg",
		"body": "for ${2:i} in ${3:x} to ${4:y} generate\n\t$0\nend generate ;",
		"description": "for generate",
		"scope": "source.vhdl"
	},
	"if": {
		"prefix": "if",
		"body": "if ${1:expression} then\n\t$0\nend if;",
		"description": "if",
		"scope": "source.vhdl"
	},
	"pack": {
		"prefix": "pack",
		"body": "package ${1:pkg} is\n\t$0\nend package ;",
		"description": "package",
		"scope": "source.vhdl"
	},
	"process --normal": {
		"prefix": "process --normal",
		"body": "${1:identifier} : process(${2:sensitivity_list})\n$3\nbegin\n\t$4\nend process; -- ${1:identifier}\n",
		"description": "process",
		"scope": "source.vhdl"
	},
	"s": {
		"prefix": "s",
		"body": "signed(${1:x} downto ${2:0}) ;$0",
		"description": "signed downto",
		"scope": "source.vhdl"
	},
	"sr": {
		"prefix": "sr",
		"body": "signed(${1:signal}'range) ;$0",
		"description": "signed range",
		"scope": "source.vhdl"
	},
	"process --synchronous": {
		"prefix": "process --synchronous",
		"body": "${1:identifier} : process(clk$2)\nbegin\n\tif((clk'event) and (clk='1')) then\n\t\t$2\n\tend if;\nend process; -- $1\n",
		"description": "synchronous process",
		"scope": "source.vhdl"
	},
	"slvr": {
		"prefix": "slvr",
		"body": "std_logic_vector(${1:signal}'range) ;$2",
		"description": "std_logic_vector range",
		"scope": "source.vhdl"
	},
	"unsigned(i downto 0)": {
		"prefix": "unsigned(i downto 0)",
		"body": "unsigned(${1:i} downto ${2:0});\n",
		"description": "unsigned downto",
		"scope": "source.vhdl"
	},
	"ur": {
		"prefix": "ur",
		"body": "unsigned(${1:signal}'range) ;$0",
		"description": "unsigned range",
		"scope": "source.vhdl"
	},
	"vhdl": {
		"prefix": "vhdl",
		"body": "library ieee ;\nuse ieee.std_logic_1164.all ;\nuse ieee.numeric_std.all ;\n\nentity ${1:ent} is\n  port(\n\t\tclk : in std_logic$2);\nend ${1:ent} ; \n\narchitecture ${3:arch} of ${1:ent} is\n$4\nbegin\n\t$0\nend architecture;",
		"description": "vhdl template",
		"scope": "source.vhdl"
	},
	"while": {
		"prefix": "while",
		"body": "while ${1:expression} loop\n\t$0\nend loop;",
		"description": "while",
		"scope": "source.vhdl"
	},
	"tb": {
		"prefix": "testbench",
		"body": "library ieee;\nuse ieee.std_logic_1164.all;\nuse ieee.numeric_std.all;\n\nentity ${1:ent}_tb is\n\nend entity $1_tb; \n\narchitecture ${2:arch}_tb of $1_tb is\ncomponent $1 is\n\tport(\n\t\trst : in std_logic;\n\t\tclk : in std_logic${3});\nend component $1;\n\n-- SeÃ±ales intermedias\nsignal rst_i\t: std_logic;\nsignal clk_i\t: std_logic:='0';\n$4\nbegin\n\n\tDUT: $1\n\t\tport map(\n\t\t\trst\t=> rst_i,\n\t\t\tclk => clk_i$5);\n\n\t-- generacion del reloj\n\tclk_i <= not clk_i after ${6:5} ns;\n\trst_i <= '1', '0' after ${7:20} ns;\n\n\tprocess\n\t$8\n\tbegin\n\t\t$0\n\tend process;\n\t\nend architecture;",
		"description": "testbench template",
		"scope": "source.vhdl"
	},
	"process --empty":{
		"prefix": "process --empty",
		"body": "${1:identifier} : process\nbegin\n\t$2 \nend process ; -- $1\n",
		"description": "empty process",
		"scope": "source.vhdl"
	},
	"port":{
		"prefix": "port",
		"body": "port(\n\tclk : in std_logic;\n\trst : in std_logic$1);\n",
		"description": "ports",
		"scope": "source.vhdl"
	},
	"std_logic_vector(i downto 0)":{
		"prefix": "std_logic_vector(i downto 0)",
		"body": "std_logic_vector(${1:i} downto ${2:0});\n",
		"description": "std_logic_vector",
		"scope": "source.vhdl"
	},
	"component":{
		"prefix": "component",
		"body": "component ${1:ent} is\n\tport(\n\t\tclk : in std_logic;\n\t\trst: in std_logic$2);\nend component;\n",
		"description": "std_logic_vector",
		"scope": "source.vhdl"
	},
	"signal":{
		"prefix": "signal",
		"body": "signal ${1:nombre} : $0\n",
		"description": "signal",
		"scope": "source.vhdl"
	},
	"constant --unsigned":{
		"prefix": "constant --unsigned(i downto 0)",
		"body": "constant ${1:cte} : unsigned(${2:i} downto ${3:0}) := to_unsigned(${4:val}, ${5:i+1});\n",
		"description": "constant",
		"scope": "source.vhdl"
	},
	"contador":{
		"prefix": "contador",
		"body": "${1:identifier} : process(clk, rst$2)\nvariable cnt : unsigned(${3:i} downto ${4:0});\nbegin\n\tif(rst = '1') then\n\t\tcnt := (others=>'0');\n  elsif((clk'event) and (clk='1')) then\n\t\tcnt:=cnt+1;\n\t\t$0\n  end if;\nend process ; -- $1\n",
		"description": "contador",
		"scope": "source.vhdl"
	},
	"signal --contador nombrado":{
		"prefix": "signal --contador",
		"body": "signal ${1:nombre} : std_logic_vector(${2:i} downto ${3:0});\nconstant cte$5unsigned : unsigned($2 downto $3) := to_unsigned(${5:val}, ${6:$2+1});  --Valor de la contante $5\n",
		"description": "signal + constant",
		"scope": "source.vhdl"
	},
	"contador --signal nombrado":{
		"prefix": "contador --signal",
		"body": "${1:identifier} : process(clk, rst$2)\nvariable ${3:cnt} : unsigned(${4:i} downto ${5:0});\nbegin\n\tif(rst = '1') then\n\t\t$3 := (others=>'0');\n  elsif((clk'event) and (clk='1')) then\n\t\t$3:=cnt+1;\n\t\tif($3 = ${6:cte}) then\n\t\t\t$3:=(others=>'0');\n\t\tend if;\n\tend if;\n\t${7:nombre} <= std_logic_vector($3);\nend process ; -- $1\n",
		"description": "contador --signal",
		"scope": "source.vhdl"
	},
	"std_logic":{
		"prefix": "std_logic",
		"body": "std_logic;\n",
		"description": "std_logic",
		"scope": "source.vhdl"
	},
	"unsigned":{
		"prefix": "unsigned",
		"body": "unsigned;\n",
		"description": "unsigned",
		"scope": "source.vhdl"
	},
	"signal --contador":{
		"prefix": "signal --contador",
		"body": "signal ${1:nombre} : std_logic_vector(${2:i} downto ${3:0});\nconstant ${4:cte} : unsigned($2 downto $3) := to_unsigned(${5:val}, ${6:$2+1});  --Valor de la contante $5\n",
		"description": "signal + constant",
		"scope": "source.vhdl"
	}
}
	
